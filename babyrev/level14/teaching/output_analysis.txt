[+] Welcome to /babyrev_level14_teaching1!
[+] This challenge is an custom emulator. It emulates a completely custom
[+] architecture that we call "Yan85"! You'll have to understand the
[+] emulator to understand the architecture, and you'll have to understand
[+] the architecture to understand the code being emulated, and you will
[+] have to understand that code to get the flag. Good luck!
[+] Starting interpreter loop! Good luck!

// MEM[0xd9] = 0xa9
[V] a:0 b:0 c:0 d:0 s:0 i:0x1 f:0
[I] op:0x2 arg1:0x4 arg2:0xa9
[s] IMM d = 0xa9
[V] a:0 b:0 c:0 d:0xa9 s:0 i:0x2 f:0
[I] op:0x2 arg1:0x8 arg2:0xd9
[s] IMM c = 0xd9
[V] a:0 b:0 c:0xd9 d:0xa9 s:0 i:0x3 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0xd9] = 0xa9
// MEM[0xd8] = 0xfc
[V] a:0 b:0 c:0xd9 d:0xa9 s:0 i:0x4 f:0
[I] op:0x2 arg1:0x4 arg2:0xfc
[s] IMM d = 0xfc
[V] a:0 b:0 c:0xd9 d:0xfc s:0 i:0x5 f:0
[I] op:0x2 arg1:0x8 arg2:0xd8
[s] IMM c = 0xd8
[V] a:0 b:0 c:0xd8 d:0xfc s:0 i:0x6 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
// MEM[0xd7] = 0x74
[V] a:0 b:0 c:0xd8 d:0xfc s:0 i:0x7 f:0
[I] op:0x2 arg1:0x4 arg2:0x74
[s] IMM d = 0x74
[V] a:0 b:0 c:0xd8 d:0x74 s:0 i:0x8 f:0
[I] op:0x2 arg1:0x8 arg2:0xd7
[s] IMM c = 0xd7
[V] a:0 b:0 c:0xd7 d:0x74 s:0 i:0x9 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
// MEM[0xdf] = 0xa9
[V] a:0 b:0 c:0xd7 d:0x74 s:0 i:0xa f:0
[I] op:0x2 arg1:0x4 arg2:0xa9
[s] IMM d = 0xa9
[V] a:0 b:0 c:0xd7 d:0xa9 s:0 i:0xb f:0
[I] op:0x2 arg1:0x8 arg2:0xdf
[s] IMM c = 0xdf
[V] a:0 b:0 c:0xdf d:0xa9 s:0 i:0xc f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdf] = 0xa9
// MEM[0xdc] = 0xd1
[V] a:0 b:0 c:0xdf d:0xa9 s:0 i:0xd f:0
[I] op:0x2 arg1:0x4 arg2:0xd1
[s] IMM d = 0xd1
[V] a:0 b:0 c:0xdf d:0xd1 s:0 i:0xe f:0
[I] op:0x2 arg1:0x8 arg2:0xdc
[s] IMM c = 0xdc
[V] a:0 b:0 c:0xdc d:0xd1 s:0 i:0xf f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
// STACK[0x1] = 0
// STACK[0x2] = 0
// STACK[0x3] = 0xdc
[V] a:0 b:0 c:0xdc d:0xd1 s:0 i:0x10 f:0
[I] op:0x8 arg1:0 arg2:0x40
[s] STK NONE a
[s] ... pushing a
[V] a:0 b:0 c:0xdc d:0xd1 s:0x1 i:0x11 f:0
[I] op:0x8 arg1:0 arg2:0x10
[s] STK NONE b
[s] ... pushing b
[V] a:0 b:0 c:0xdc d:0xd1 s:0x2 i:0x12 f:0
[I] op:0x8 arg1:0 arg2:0x8
[s] STK NONE c
[s] ... pushing c
[V] a:0 b:0 c:0xdc d:0xd1 s:0x3 i:0x13 f:0
[I] op:0x2 arg1:0x10 arg2:0x1

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
// b = 0x4
[s] IMM b = 0x1
[V] a:0 b:0x1 c:0xdc d:0xd1 s:0x3 i:0x14 f:0
[I] op:0x80 arg1:0x10 arg2:0x2
[s] ADD b s
[V] a:0 b:0x4 c:0xdc d:0xd1 s:0x3 i:0x15 f:0
[I] op:0x2 arg1:0x4 arg2:0x45

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
// STACK[0x4] = 0x45
[s] IMM d = 0x45
[V] a:0 b:0x4 c:0xdc d:0x45 s:0x3 i:0x16 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
// STACK[0x5] = 0x4e
[V] a:0 b:0x4 c:0xdc d:0x45 s:0x4 i:0x17 f:0
[I] op:0x2 arg1:0x4 arg2:0x4e
[s] IMM d = 0x4e
[V] a:0 b:0x4 c:0xdc d:0x4e s:0x4 i:0x18 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
// STACK[0x6] = 0x54
[V] a:0 b:0x4 c:0xdc d:0x4e s:0x5 i:0x19 f:0
[I] op:0x2 arg1:0x4 arg2:0x54
[s] IMM d = 0x54
[V] a:0 b:0x4 c:0xdc d:0x54 s:0x5 i:0x1a f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
// STACK[0x7] = 0x45
[V] a:0 b:0x4 c:0xdc d:0x54 s:0x6 i:0x1b f:0
[I] op:0x2 arg1:0x4 arg2:0x45
[s] IMM d = 0x45
[V] a:0 b:0x4 c:0xdc d:0x45 s:0x6 i:0x1c f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
// STACK[0x8] = 0x52
[V] a:0 b:0x4 c:0xdc d:0x45 s:0x7 i:0x1d f:0
[I] op:0x2 arg1:0x4 arg2:0x52
[s] IMM d = 0x52
[V] a:0 b:0x4 c:0xdc d:0x52 s:0x7 i:0x1e f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
// STACK[0x9] = 0x20
[V] a:0 b:0x4 c:0xdc d:0x52 s:0x8 i:0x1f f:0
[I] op:0x2 arg1:0x4 arg2:0x20
[s] IMM d = 0x20
[V] a:0 b:0x4 c:0xdc d:0x20 s:0x8 i:0x20 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
// STACK[0xa] = 0x4b
[V] a:0 b:0x4 c:0xdc d:0x20 s:0x9 i:0x21 f:0
[I] op:0x2 arg1:0x4 arg2:0x4b
[s] IMM d = 0x4b
[V] a:0 b:0x4 c:0xdc d:0x4b s:0x9 i:0x22 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
// STACK[0xb] = 0x45
[V] a:0 b:0x4 c:0xdc d:0x4b s:0xa i:0x23 f:0
[I] op:0x2 arg1:0x4 arg2:0x45
[s] IMM d = 0x45
[V] a:0 b:0x4 c:0xdc d:0x45 s:0xa i:0x24 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// STACK[0xc] = 0x59
[V] a:0 b:0x4 c:0xdc d:0x45 s:0xb i:0x25 f:0
[I] op:0x2 arg1:0x4 arg2:0x59
[s] IMM d = 0x59
[V] a:0 b:0x4 c:0xdc d:0x59 s:0xb i:0x26 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x59
// STACK[0xd] = 0x3a
[V] a:0 b:0x4 c:0xdc d:0x59 s:0xc i:0x27 f:0
[I] op:0x2 arg1:0x4 arg2:0x3a
[s] IMM d = 0x3a
[V] a:0 b:0x4 c:0xdc d:0x3a s:0xc i:0x28 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x59
## STACK[0xd] = 0x3a
// STACK[0xe] = 0x20
[V] a:0 b:0x4 c:0xdc d:0x3a s:0xd i:0x29 f:0
[I] op:0x2 arg1:0x4 arg2:0x20
[s] IMM d = 0x20
[V] a:0 b:0x4 c:0xdc d:0x20 s:0xd i:0x2a f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45 ('E')
## STACK[0x5] = 0x4e ('N')
## STACK[0x6] = 0x54 ('T')
## STACK[0x7] = 0x45 ('E')
## STACK[0x8] = 0x52 ('R')
## STACK[0x9] = 0x20 (' ')
## STACK[0xa] = 0x4b ('K')
## STACK[0xb] = 0x45 ('E')
## STACK[0xc] = 0x59 ('Y')
## STACK[0xd] = 0x3a (':')
## STACK[0xe] = 0x20 (' ')
// d = write(1, "ENTER KEY: ", 11);
[V] a:0 b:0x4 c:0xdc d:0x20 s:0xe i:0x2b f:0
[I] op:0x2 arg1:0x8 arg2:0xb
[s] IMM c = 0xb
[V] a:0 b:0x4 c:0xb d:0x20 s:0xe i:0x2c f:0
[I] op:0x2 arg1:0x40 arg2:0x1
[s] IMM a = 0x1
[V] a:0x1 b:0x4 c:0xb d:0x20 s:0xe i:0x2d f:0
[I] op:0x20 arg1:0x8 arg2:0x4
[s] SYS 0x8 d
[s] ... write
[s] ... return value (in register d): 0xb
ENTER KEY: 

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x59
## STACK[0xd] = 0x3a
## STACK[0xe] = 0x20
// c = POP();
// b = POP();
// a = POP();
// PUSH(a);
// PUSH(b);
// PUSH(c);
[V] a:0x1 b:0x4 c:0xb d:0xb s:0xe i:0x2e f:0
[I] op:0x8 arg1:0x8 arg2:0
[s] STK c NONE
[s] ... popping c
[V] a:0x1 b:0x4 c:0x20 d:0xb s:0xd i:0x2f f:0
[I] op:0x8 arg1:0x10 arg2:0
[s] STK b NONE
[s] ... popping b
[V] a:0x1 b:0x3a c:0x20 d:0xb s:0xc i:0x30 f:0
[I] op:0x8 arg1:0x40 arg2:0
[s] STK a NONE
[s] ... popping a
[V] a:0x59 b:0x3a c:0x20 d:0xb s:0xb i:0x31 f:0
[I] op:0x8 arg1:0 arg2:0x40
[s] STK NONE a
[s] ... pushing a
[V] a:0x59 b:0x3a c:0x20 d:0xb s:0xc i:0x32 f:0
[I] op:0x8 arg1:0 arg2:0x10
[s] STK NONE b
[s] ... pushing b
[V] a:0x59 b:0x3a c:0x20 d:0xb s:0xd i:0x33 f:0
[I] op:0x8 arg1:0 arg2:0x8
[s] STK NONE c
[s] ... pushing c

## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x59
## STACK[0xd] = 0x3a
## STACK[0xe] = 0x20
// d = read(0, MEM + 0x40, 0xb);
[V] a:0x59 b:0x3a c:0x20 d:0xb s:0xe i:0x34 f:0
[I] op:0x2 arg1:0x10 arg2:0x40
[s] IMM b = 0x40
[V] a:0x59 b:0x40 c:0x20 d:0xb s:0xe i:0x35 f:0
[I] op:0x2 arg1:0x8 arg2:0xb
[s] IMM c = 0xb
[V] a:0x59 b:0x40 c:0xb d:0xb s:0xe i:0x36 f:0
[I] op:0x2 arg1:0x40 arg2:0
[s] IMM a = 0
[V] a:0 b:0x40 c:0xb d:0xb s:0xe i:0x37 f:0
[I] op:0x20 arg1:0x10 arg2:0x4
[s] SYS 0x10 d
[s] ... read_memory
[s] ... return value (in register d): 0xb
Hello, Worl

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x59
## STACK[0xd] = 0x3a
## STACK[0xe] = 0x20
// c = POP();
// b = POP();
// a = POP();
[V] a:0 b:0x40 c:0xb d:0x6 s:0xe i:0x38 f:0
[I] op:0x8 arg1:0x8 arg2:0
[s] STK c NONE
[s] ... popping c
[V] a:0 b:0x40 c:0x20 d:0x6 s:0xd i:0x39 f:0
[I] op:0x8 arg1:0x10 arg2:0
[s] STK b NONE
[s] ... popping b
[V] a:0 b:0x3a c:0x20 d:0x6 s:0xc i:0x3a f:0
[I] op:0x8 arg1:0x40 arg2:0
[s] STK a NONE
[s] ... popping a

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xdc] = 0xd1
## MEM[0xdf] = 0xa9
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// MEM[0xdd] = 0xc1
[V] a:0x59 b:0x3a c:0x20 d:0x6 s:0xb i:0x3b f:0
[I] op:0x2 arg1:0x4 arg2:0xc1
[s] IMM d = 0xc1
[V] a:0x59 b:0x3a c:0x20 d:0xc1 s:0xb i:0x3c f:0
[I] op:0x2 arg1:0x8 arg2:0xdd
[s] IMM c = 0xdd
[V] a:0x59 b:0x3a c:0xdd d:0xc1 s:0xb i:0x3d f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

// MEM[0xda] = 0x3a
[V] a:0x59 b:0x3a c:0xdd d:0xc1 s:0xb i:0x3e f:0
[I] op:0x2 arg1:0x4 arg2:0x3a
[s] IMM d = 0x3a
[V] a:0x59 b:0x3a c:0xdd d:0x3a s:0xb i:0x3f f:0
[I] op:0x2 arg1:0x8 arg2:0xda
[s] IMM c = 0xda
[V] a:0x59 b:0x3a c:0xda d:0x3a s:0xb i:0x40 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

// MEM[0xde] = 0x3b
[V] a:0x59 b:0x3a c:0xda d:0x3a s:0xb i:0x41 f:0
[I] op:0x2 arg1:0x4 arg2:0x3b
[s] IMM d = 0x3b
[V] a:0x59 b:0x3a c:0xda d:0x3b s:0xb i:0x42 f:0
[I] op:0x2 arg1:0x8 arg2:0xde
[s] IMM c = 0xde
[V] a:0x59 b:0x3a c:0xde d:0x3b s:0xb i:0x43 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

// MEM[0xdb] = 0x95
[V] a:0x59 b:0x3a c:0xde d:0x3b s:0xb i:0x44 f:0
[I] op:0x2 arg1:0x4 arg2:0x95
[s] IMM d = 0x95
[V] a:0x59 b:0x3a c:0xde d:0x95 s:0xb i:0x45 f:0
[I] op:0x2 arg1:0x8 arg2:0xdb
[s] IMM c = 0xdb
[V] a:0x59 b:0x3a c:0xdb d:0x95 s:0xb i:0x46 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

// MEM[0xe0] = 0x48
[V] a:0x59 b:0x3a c:0xdb d:0x95 s:0xb i:0x47 f:0
[I] op:0x2 arg1:0x4 arg2:0x48
[s] IMM d = 0x48
[V] a:0x59 b:0x3a c:0xdb d:0x48 s:0xb i:0x48 f:0
[I] op:0x2 arg1:0x8 arg2:0xe0
[s] IMM c = 0xe0
[V] a:0x59 b:0x3a c:0xe0 d:0x48 s:0xb i:0x49 f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

// MEM[0xe1] = 0x8e
[V] a:0x59 b:0x3a c:0xe0 d:0x48 s:0xb i:0x4a f:0
[I] op:0x2 arg1:0x4 arg2:0x8e
[s] IMM d = 0x8e
[V] a:0x59 b:0x3a c:0xe0 d:0x8e s:0xb i:0x4b f:0
[I] op:0x2 arg1:0x8 arg2:0xe1
[s] IMM c = 0xe1
[V] a:0x59 b:0x3a c:0xe1 d:0x8e s:0xb i:0x4c f:0
[I] op:0x40 arg1:0x8 arg2:0x4
[s] STM *c = d

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// i = 0xdf
[V] a:0x59 b:0x3a c:0xe1 d:0x8e s:0xb i:0x4d f:0
[I] op:0x2 arg1:0x20 arg2:0xde
[s] IMM i = 0xde

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// a = 0x40
// b = 0xd9
// c = 0x9
// d = 0x2
// d += i
// STACK[0xc] = 0xe5
[V] a:0x59 b:0x3a c:0xe1 d:0x8e s:0xb i:0xdf f:0
[I] op:0x2 arg1:0x40 arg2:0x40
[s] IMM a = 0x40
[V] a:0x40 b:0x3a c:0xe1 d:0x8e s:0xb i:0xe0 f:0
[I] op:0x2 arg1:0x10 arg2:0xd9
[s] IMM b = 0xd9
[V] a:0x40 b:0xd9 c:0xe1 d:0x8e s:0xb i:0xe1 f:0
[I] op:0x2 arg1:0x8 arg2:0x9
[s] IMM c = 0x9
[V] a:0x40 b:0xd9 c:0x9 d:0x8e s:0xb i:0xe2 f:0
[I] op:0x2 arg1:0x4 arg2:0x2
[s] IMM d = 0x2
[V] a:0x40 b:0xd9 c:0x9 d:0x2 s:0xb i:0xe3 f:0
[I] op:0x80 arg1:0x4 arg2:0x20
[s] ADD d i
[V] a:0x40 b:0xd9 c:0x9 d:0xe5 s:0xb i:0xe4 f:0
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0xe5
// i = 4d
[V] a:0x40 b:0xd9 c:0x9 d:0xe5 s:0xc i:0xe5 f:0
[I] op:0x2 arg1:0x20 arg2:0x4d
[s] IMM i = 0x4e

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0xe5
// a += c
// b += c
// d = 0xff
// a--
// b--
// STACK[0xd] = 0x48
// STACK[0xe] = 0xe1
[V] a:0x40 b:0xd9 c:0x9 d:0xe5 s:0xc i:0x4e f:0
[I] op:0x80 arg1:0x40 arg2:0x8
[s] ADD a c
[V] a:0x49 b:0xd9 c:0x9 d:0xe5 s:0xc i:0x4f f:0
[I] op:0x80 arg1:0x10 arg2:0x8
[s] ADD b c
[V] a:0x49 b:0xe2 c:0x9 d:0xe5 s:0xc i:0x50 f:0
[I] op:0x2 arg1:0x4 arg2:0xff
[s] IMM d = 0xff
[V] a:0x49 b:0xe2 c:0x9 d:0xff s:0xc i:0x51 f:0
[I] op:0x80 arg1:0x40 arg2:0x4
[s] ADD a d
[V] a:0x48 b:0xe2 c:0x9 d:0xff s:0xc i:0x52 f:0
[I] op:0x80 arg1:0x10 arg2:0x4
[s] ADD b d
[V] a:0x48 b:0xe1 c:0x9 d:0xff s:0xc i:0x53 f:0
[I] op:0x8 arg1:0 arg2:0x40
[s] STK NONE a
[s] ... pushing a
[V] a:0x48 b:0xe1 c:0x9 d:0xff s:0xd i:0x54 f:0
[I] op:0x8 arg1:0 arg2:0x10
[s] STK NONE b
[s] ... pushing b

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0xe5
## STACK[0xd] = 0x48
## STACK[0xe] = 0xe1
// a = MEM[0x48]
// b = MEM[0xe1]
// f = CMP(a, b);
// POP();
// POP();
// d = 0x61
// if (f & NOT_EQUAL): JUMP(d);
[V] a:0x48 b:0xe1 c:0x9 d:0xff s:0xe i:0x55 f:0
[I] op:0x1 arg1:0x40 arg2:0x40
[s] LDM a = *a
[V] a:0 b:0xe1 c:0x9 d:0xff s:0xe i:0x56 f:0
[I] op:0x1 arg1:0x10 arg2:0x10
[s] LDM b = *b
[V] a:0 b:0x8e c:0x9 d:0xff s:0xe i:0x57 f:0
[I] op:0x10 arg1:0x40 arg2:0x10
[s] CMP a b
[V] a:0 b:0x8e c:0x9 d:0xff s:0xe i:0x58 f:0xa
[I] op:0x8 arg1:0x10 arg2:0
[s] STK b NONE
[s] ... popping b
[V] a:0 b:0xe1 c:0x9 d:0xff s:0xd i:0x59 f:0xa
[I] op:0x8 arg1:0x40 arg2:0
[s] STK a NONE
[s] ... popping a
[V] a:0x48 b:0xe1 c:0x9 d:0xff s:0xc i:0x5a f:0xa
[I] op:0x2 arg1:0x4 arg2:0x61
[s] IMM d = 0x61
[V] a:0x48 b:0xe1 c:0x9 d:0x61 s:0xc i:0x5b f:0xa
[I] op:0x4 arg1:0x2 arg2:0x4
[j] JMP N d
[j] ... TAKEN

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0xe5
// d = 0x9
// i = POP();
[V] a:0x48 b:0xe1 c:0x9 d:0x61 s:0xc i:0x62 f:0xa
[I] op:0x8 arg1:0x4 arg2:0x8
[s] STK d c
[s] ... pushing c
[s] ... popping d
[V] a:0x48 b:0xe1 c:0x9 d:0x9 s:0xc i:0x63 f:0xa
[I] op:0x8 arg1:0x20 arg2:0
[s] STK i NONE
[s] ... popping i

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// c = 0
// f = CMP(d, c);
// d = 0x63
// if (f & EQUAL): JUMP(d);
// d = 0xc1
// if (f & LARGER_THAN): JUMP(d);
[V] a:0x48 b:0xe1 c:0x9 d:0x9 s:0xb i:0xe6 f:0xa
[I] op:0x2 arg1:0x8 arg2:0
[s] IMM c = 0
[V] a:0x48 b:0xe1 c:0 d:0x9 s:0xb i:0xe7 f:0xa
[I] op:0x10 arg1:0x4 arg2:0x8
[s] CMP d c
[V] a:0x48 b:0xe1 c:0 d:0x9 s:0xb i:0xe8 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x63
[s] IMM d = 0x63
[V] a:0x48 b:0xe1 c:0 d:0x63 s:0xb i:0xe9 f:0x12
[I] op:0x4 arg1:0x1 arg2:0x4
[j] JMP E d
[j] ... NOT TAKEN
[V] a:0x48 b:0xe1 c:0 d:0x63 s:0xb i:0xea f:0x12
[I] op:0x2 arg1:0x4 arg2:0xc1
[s] IMM d = 0xc1
[V] a:0x48 b:0xe1 c:0 d:0xc1 s:0xb i:0xeb f:0x12
[I] op:0x4 arg1:0x18 arg2:0x4
[j] JMP LG d
[j] ... TAKEN

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
// b = 0x1
// b += s
[V] a:0x48 b:0xe1 c:0 d:0xc1 s:0xb i:0xc2 f:0x12
[I] op:0x2 arg1:0x10 arg2:0x1
[s] IMM b = 0x1
[V] a:0x48 b:0x1 c:0 d:0xc1 s:0xb i:0xc3 f:0x12
[I] op:0x80 arg1:0x10 arg2:0x2
[s] ADD b s

// STACK[0xc] = 0x49
[V] a:0x48 b:0xc c:0 d:0xc1 s:0xb i:0xc4 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x49
[s] IMM d = 0x49
[V] a:0x48 b:0xc c:0 d:0x49 s:0xb i:0xc5 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0xd] = 0x4e
[V] a:0x48 b:0xc c:0 d:0x49 s:0xc i:0xc6 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x4e
[s] IMM d = 0x4e
[V] a:0x48 b:0xc c:0 d:0x4e s:0xc i:0xc7 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0xe] = 0x43
[V] a:0x48 b:0xc c:0 d:0x4e s:0xd i:0xc8 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x43
[s] IMM d = 0x43
[V] a:0x48 b:0xc c:0 d:0x43 s:0xd i:0xc9 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0xf] = 0x4f
[V] a:0x48 b:0xc c:0 d:0x43 s:0xe i:0xca f:0x12
[I] op:0x2 arg1:0x4 arg2:0x4f
[s] IMM d = 0x4f
[V] a:0x48 b:0xc c:0 d:0x4f s:0xe i:0xcb f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x10] = 0x52
[V] a:0x48 b:0xc c:0 d:0x4f s:0xf i:0xcc f:0x12
[I] op:0x2 arg1:0x4 arg2:0x52
[s] IMM d = 0x52
[V] a:0x48 b:0xc c:0 d:0x52 s:0xf i:0xcd f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x11] = 0x52
[V] a:0x48 b:0xc c:0 d:0x52 s:0x10 i:0xce f:0x12
[I] op:0x2 arg1:0x4 arg2:0x52
[s] IMM d = 0x52
[V] a:0x48 b:0xc c:0 d:0x52 s:0x10 i:0xcf f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x12] = 0x45
[V] a:0x48 b:0xc c:0 d:0x52 s:0x11 i:0xd0 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x45
[s] IMM d = 0x45
[V] a:0x48 b:0xc c:0 d:0x45 s:0x11 i:0xd1 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x13] = 0x43
[V] a:0x48 b:0xc c:0 d:0x45 s:0x12 i:0xd2 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x43
[s] IMM d = 0x43
[V] a:0x48 b:0xc c:0 d:0x43 s:0x12 i:0xd3 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x14] = 0x54
[V] a:0x48 b:0xc c:0 d:0x43 s:0x13 i:0xd4 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x54
[s] IMM d = 0x54
[V] a:0x48 b:0xc c:0 d:0x54 s:0x13 i:0xd5 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x15] = 0x21
[V] a:0x48 b:0xc c:0 d:0x54 s:0x14 i:0xd6 f:0x12
[I] op:0x2 arg1:0x4 arg2:0x21
[s] IMM d = 0x21
[V] a:0x48 b:0xc c:0 d:0x21 s:0x14 i:0xd7 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

// STACK[0x16] = 0xa
[V] a:0x48 b:0xc c:0 d:0x21 s:0x15 i:0xd8 f:0x12
[I] op:0x2 arg1:0x4 arg2:0xa
[s] IMM d = 0xa
[V] a:0x48 b:0xc c:0 d:0xa s:0x15 i:0xd9 f:0x12
[I] op:0x8 arg1:0 arg2:0x4
[s] STK NONE d
[s] ... pushing d

## MEM[0x40] = 'H'
## MEM[0x41] = 'e'
## MEM[0x42] = 'l'
## MEM[0x43] = 'l'
## MEM[0x44] = 'o'
## MEM[0x45] = ','
## MEM[0x46] = ' '
## MEM[0x47] = 'W'
## MEM[0x48] = 'o'
## MEM[0x49] = 'r'
## MEM[0x4a] = 'l'
## MEM[0xd7] = 0x74
## MEM[0xd8] = 0xfc
## MEM[0xd9] = 0xa9 
## MEM[0xda] = 0x3a
## MEM[0xdb] = 0x95
## MEM[0xdc] = 0xd1
## MEM[0xdd] = 0xc1
## MEM[0xde] = 0x3b
## MEM[0xdf] = 0xa9
## MEM[0xe0] = 0x48
## MEM[0xe1] = 0x8e
## STACK[0x1] = 0
## STACK[0x2] = 0
## STACK[0x3] = 0xdc
## STACK[0x4] = 0x45
## STACK[0x5] = 0x4e
## STACK[0x6] = 0x54
## STACK[0x7] = 0x45
## STACK[0x8] = 0x52
## STACK[0x9] = 0x20
## STACK[0xa] = 0x4b
## STACK[0xb] = 0x45
## STACK[0xc] = 0x49 ('I')
## STACK[0xd] = 0x4e ('N')
## STACK[0xe] = 0x43 ('C')
## STACK[0xf] = 0x4f ('O')
## STACK[0x10] = 0x52 ('R')
## STACK[0x11] = 0x52 ('R')
## STACK[0x12] = 0x45 ('E')
## STACK[0x13] = 0x43 ('C')
## STACK[0x14] = 0x54 ('T')
## STACK[0x15] = 0x21 ('!')
## STACK[0x16] = 0xa ('\n')
// d = write(1, "INCORRECT!\n", 0xb);
[V] a:0x48 b:0xc c:0 d:0xa s:0x16 i:0xda f:0x12
[I] op:0x2 arg1:0x8 arg2:0xb
[s] IMM c = 0xb
[V] a:0x48 b:0xc c:0xb d:0xa s:0x16 i:0xdb f:0x12
[I] op:0x2 arg1:0x40 arg2:0x1
[s] IMM a = 0x1
[V] a:0x1 b:0xc c:0xb d:0xa s:0x16 i:0xdc f:0x12
[I] op:0x20 arg1:0x8 arg2:0x4
[s] SYS 0x8 d
[s] ... write
[s] ... return value (in register d): 0xb
INCORRECT!

// exit(1);
[V] a:0x1 b:0xc c:0xb d:0xb s:0x16 i:0xdd f:0x12
[I] op:0x2 arg1:0x40 arg2:0x1
[s] IMM a = 0x1
[V] a:0x1 b:0xc c:0xb d:0xb s:0x16 i:0xde f:0x12
[I] op:0x20 arg1:0x4 arg2:0
[s] SYS 0x4 NONE
[s] ... exit
